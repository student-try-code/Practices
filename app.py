# full_random_mode_shuffle_mode_verified_final_with_image_edit_reset_progress.py
# ƒê√£ c·∫≠p nh·∫≠t:
# - Th√™m ch·ª©c nƒÉng l·ªçc c√¢u ch∆∞a c√≥ CodeTopic
# - Th√™m ch·ª©c nƒÉng paste h√¨nh ·∫£nh v√†o note t·ª´ clipboard (Ctrl+V)
# - ƒêi·ªÅu ch·ªânh v·ªã tr√≠ c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng
# - Gi·ªØ nguy√™n t·∫•t c·∫£ ch·ª©c nƒÉng hi·ªán c√≥

import pandas as pd
import streamlit as st
import random
import re
import os
import time
from PIL import Image, ImageGrab
import io
import base64
import pyperclip


@st.cache_data(ttl=0)
def load_sheets(path):
    xls = pd.ExcelFile(path)
    return {sheet: xls.parse(sheet).assign(SheetName=sheet) for sheet in xls.sheet_names}


def reload_excel():
    global all_sheets, df_all
    all_sheets = load_sheets(excel_file)
    df_all = pd.concat(
        [df for name, df in all_sheets.items() if "All" in selected_sheets or name in selected_sheets],
        ignore_index=True
    )


def show_progress_in_sidebar(total, current, mode, key_prefix=""):
    """Hi·ªÉn th·ªã ti·∫øn ƒë·ªô trong sidebar"""
    with st.sidebar:
        st.markdown("### üìä Ti·∫øn ƒë·ªô l√†m ƒë·ªÅ")
        st.write(f"C√¢u hi·ªán t·∫°i: {current + 1} / {total}")

        jump_to = st.number_input(
            "Nh·∫≠p s·ªë c√¢u mu·ªën chuy·ªÉn ƒë·∫øn:",
            min_value=1,
            max_value=total,
            value=current + 1,
            step=1,
            key=f"{key_prefix}_jump_to"
        )

        if jump_to != current + 1:
            st.session_state[f"{key_prefix}_index"] = jump_to - 1
            st.rerun()


def show_navigation_buttons(total, current, mode, key_prefix=""):
    """Hi·ªÉn th·ªã c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng"""
    cols = st.columns(5)
    with cols[0]:
        if st.button("‚èÆ C√¢u ƒë·∫ßu", key=f"{key_prefix}_first"):
            st.session_state[f"{key_prefix}_index"] = 0
            st.rerun()
    with cols[1]:
        if st.button("‚óÄÔ∏è L√πi l·∫°i", key=f"{key_prefix}_prev"):
            st.session_state[f"{key_prefix}_index"] = max(0, current - 1)
            st.rerun()
    with cols[2]:
        if st.button("‚ñ∂Ô∏è Ti·∫øp theo", key=f"{key_prefix}_next"):
            st.session_state[f"{key_prefix}_index"] = min(total - 1, current + 1)
            st.rerun()
    with cols[3]:
        if st.button("‚è≠ C√¢u cu·ªëi", key=f"{key_prefix}_last"):
            st.session_state[f"{key_prefix}_index"] = total - 1
            st.rerun()
    with cols[4]:
        if mode == "Ng·∫´u nhi√™n 1 c√¢u" and st.button('üîÄ Random', key=f"{key_prefix}_random"):
            st.session_state[f"{key_prefix}_index"] = random.randint(0, total - 1)
            st.rerun()


def display_note_with_images(note_text, image_folder):
    if not note_text or pd.isna(note_text):
        return ""

    # Split note into lines
    lines = note_text.split('\n')

    for line in lines:
        # Check for image markdown syntax ![alt](path)
        if line.strip().startswith('![') and '](' in line and line.endswith(')'):
            try:
                alt_text = line.split('![')[1].split(']')[0]
                img_path = line.split('](')[1][:-1]
                full_path = os.path.join(image_folder, img_path)

                if os.path.exists(full_path):
                    st.image(full_path, caption=alt_text, use_container_width=True)
                else:
                    st.warning(f"Kh√¥ng t√¨m th·∫•y h√¨nh ·∫£nh: {img_path}")
            except:
                st.write(line)
        else:
            st.write(line)


# --- PH·∫¶N NH·∫¨P ƒê∆Ø·ªúNG D·∫™N FILE EXCEL ---
st.sidebar.title("Tu·ª≥ ch·ªçn")
excel_path = st.sidebar.text_input(
    "üìÅ D√°n ƒë∆∞·ªùng d·∫´n file Excel (.xlsx):",
    help="V√≠ d·ª•: C:/Users/name/Documents/ngan_hang_cau_hoi.xlsx"
)

# Ki·ªÉm tra file h·ª£p l·ªá
if not excel_path:
    st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n file Excel.")
    st.stop()

if not excel_path.endswith('.xlsx'):
    st.error("‚ùå File ph·∫£i c√≥ ƒë·ªãnh d·∫°ng .xlsx")
    st.stop()

if not os.path.isfile(excel_path):
    st.error(f"‚õî Kh√¥ng t√¨m th·∫•y file t·∫°i: {excel_path}")
    st.stop()

# Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n
excel_file = excel_path
image_folder = os.path.join(os.path.dirname(excel_file), "images")

# Ki·ªÉm tra th∆∞ m·ª•c h√¨nh ·∫£nh
if not os.path.exists(image_folder):
    st.sidebar.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c h√¨nh ·∫£nh t·∫°i: {image_folder}")
    os.makedirs(image_folder, exist_ok=True)

# Load d·ªØ li·ªáu t·ª´ file Excel
try:
    all_sheets = load_sheets(excel_file)
except Exception as e:
    st.error(f"‚ùå L·ªói khi ƒë·ªçc file Excel: {str(e)}")
    st.stop()

# --- PH·∫¶N CH·ªåN L·ªåC V√Ä HI·ªÇN TH·ªä ---
sheet_options = ['All'] + list(all_sheets.keys())
selected_sheets = st.sidebar.multiselect("Ch·ªçn slide:", sheet_options, default=["All"])

if not selected_sheets:
    st.warning("‚ö†Ô∏è Ch∆∞a ch·ªçn sheet.")
    st.stop()

if st.sidebar.button("üîÑ T·∫£i l·∫°i file Excel"):
    reload_excel()
    st.rerun()

selected_df = pd.concat([df for name, df in all_sheets.items() if "All" in selected_sheets or name in selected_sheets])

# Th√™m option "Ch∆∞a c√≥ CodeTopic" v√†o b·ªô l·ªçc
available_topics = selected_df["CodeTopic"].dropna().unique().tolist()
topic_options = ['All', 'Ch∆∞a c√≥ CodeTopic'] + sorted(available_topics)
selected_topics = st.sidebar.multiselect("Ch·ªçn CodeTopic:", topic_options, default=["All"])

search_term = st.sidebar.text_input("T√¨m t·ª´ kho√° trong Original:").strip()
search_question = st.sidebar.text_input("T√¨m trong n·ªôi dung c√¢u h·ªèi:").strip()
search_note = st.sidebar.text_input("T√¨m trong ghi ch√∫:").strip()
mode = st.sidebar.selectbox("Ch·∫ø ƒë·ªô hi·ªÉn th·ªã c√¢u h·ªèi:", [
    "Ng·∫´u nhi√™n 1 c√¢u",
    "TƒÉng d·∫ßn theo Original",
    "Gi·∫£m d·∫ßn theo Original",
    "To√†n b·ªô kh√¥ng s·∫Øp x·∫øp",
    "Theo th·ª© t·ª± trong file Excel",
    "X√°o tr·ªôn ƒë·ªÅ - 1 c√¢u"
], index=1)

st.session_state.setdefault("show_note", False)
st.session_state.show_note = st.sidebar.checkbox("üìù Hi·ªán ghi ch√∫", value=st.session_state.show_note)

df_all = pd.concat(
    [df for name, df in all_sheets.items() if "All" in selected_sheets or name in selected_sheets],
    ignore_index=True
)

# X·ª≠ l√Ω b·ªô l·ªçc CodeTopic v·ªõi option "Ch∆∞a c√≥ CodeTopic"
if "All" in selected_topics:
    df = df_all
elif "Ch∆∞a c√≥ CodeTopic" in selected_topics:
    # L·∫•y c√°c c√¢u ch∆∞a c√≥ CodeTopic
    df_no_topic = df_all[df_all["CodeTopic"].isna()]
    # L·∫•y c√°c c√¢u c√≥ CodeTopic n·∫øu c√≥ ch·ªçn th√™m c√°c topic kh√°c
    other_topics = [t for t in selected_topics if t != "Ch∆∞a c√≥ CodeTopic"]
    if other_topics:
        df_with_topic = df_all[df_all["CodeTopic"].isin(other_topics)]
        df = pd.concat([df_no_topic, df_with_topic])
    else:
        df = df_no_topic
else:
    df = df_all[df_all["CodeTopic"].isin(selected_topics)]

# √Åp d·ª•ng c√°c b·ªô l·ªçc kh√°c
if search_term:
    df = df[df['Original'].astype(str).str.contains(search_term, case=False, na=False)]
if search_question:
    df = df[df['Question'].astype(str).str.contains(search_question, case=False, na=False)]
if search_note:
    df = df[df['Note'].astype(str).str.contains(search_note, case=False, na=False)]

# X·ª≠ l√Ω reset index khi filter thay ƒë·ªïi
current_filter = (tuple(selected_sheets), tuple(selected_topics), search_term, search_question, search_note, mode)
if st.session_state.get("last_filter_hash") != hash(current_filter):
    for key in list(st.session_state.keys()):
        if key.endswith("_show_answer") or key.endswith("_edit_mode") or key.endswith("_last") or key.endswith(
                "_edit_answer"):
            del st.session_state[key]

    # Reset index cho t·∫•t c·∫£ c√°c mode khi filter thay ƒë·ªïi
    if mode == "X√°o tr·ªôn ƒë·ªÅ - 1 c√¢u":
        st.session_state.shuffled_index = 0
    elif mode == "Ng·∫´u nhi√™n 1 c√¢u":
        st.session_state.random_index = 0
    elif mode in ["TƒÉng d·∫ßn theo Original", "Gi·∫£m d·∫ßn theo Original"]:
        st.session_state.sorted_index = 0
    elif mode == "Theo th·ª© t·ª± trong file Excel":
        st.session_state.excel_index = 0

    st.session_state.last_filter_hash = hash(current_filter)

if df.empty:
    st.warning("Kh√¥ng c√≥ c√¢u h·ªèi ph√π h·ª£p.")
    st.stop()

# Ki·ªÉm tra n·∫øu mode thay ƒë·ªïi
if st.session_state.get("last_mode") != mode:
    # Reset index cho mode m·ªõi
    if mode == "X√°o tr·ªôn ƒë·ªÅ - 1 c√¢u":
        st.session_state.shuffled_index = 0
    elif mode == "Ng·∫´u nhi√™n 1 c√¢u":
        st.session_state.random_index = 0
    elif mode in ["TƒÉng d·∫ßn theo Original", "Gi·∫£m d·∫ßn theo Original"]:
        st.session_state.sorted_index = 0
    elif mode == "Theo th·ª© t·ª± trong file Excel":
        st.session_state.excel_index = 0

# --- X·ª¨ L√ù C√ÅC CH·∫æ ƒê·ªò HI·ªÇN TH·ªä ---
if mode == "X√°o tr·ªôn ƒë·ªÅ - 1 c√¢u":
    filter_hash = hash((tuple(selected_sheets), tuple(selected_topics), search_term, search_question, search_note))
    if st.session_state.get("shuffled_filter_hash") != filter_hash or "shuffled_questions" not in st.session_state:
        st.session_state.shuffled_questions = df.sample(frac=1, random_state=random.randint(0, 99999)).to_dict(
            orient="records")
        st.session_state.shuffled_index = 0
        st.session_state.shuffled_filter_hash = filter_hash
        st.session_state.original_shuffled_order = [q['Original'] for q in st.session_state.shuffled_questions]

    questions = [st.session_state.shuffled_questions[st.session_state.shuffled_index]]
    show_progress_in_sidebar(len(st.session_state.shuffled_questions), st.session_state.shuffled_index, mode,
                             "shuffled")

elif mode == "Ng·∫´u nhi√™n 1 c√¢u":
    if "random_index" not in st.session_state:
        st.session_state.random_index = 0
    df_sorted = df
    questions = [df_sorted.iloc[st.session_state.random_index].to_dict()]
    show_progress_in_sidebar(len(df_sorted), st.session_state.random_index, mode, "random")

elif mode in ["TƒÉng d·∫ßn theo Original", "Gi·∫£m d·∫ßn theo Original"]:
    ascending = mode == "TƒÉng d·∫ßn theo Original"
    df_sorted = df.sort_values(by='Original', ascending=ascending).reset_index(drop=True)
    if "sorted_index" not in st.session_state:
        st.session_state.sorted_index = 0
    questions = [df_sorted.iloc[st.session_state.sorted_index].to_dict()]
    show_progress_in_sidebar(len(df_sorted), st.session_state.sorted_index, mode, "sorted")

elif mode == "Theo th·ª© t·ª± trong file Excel":
    df_sorted = df.reset_index(drop=True)
    if "excel_index" not in st.session_state:
        st.session_state.excel_index = 0
    questions = [df_sorted.iloc[st.session_state.excel_index].to_dict()]
    show_progress_in_sidebar(len(df_sorted), st.session_state.excel_index, mode, "excel")

else:  # To√†n b·ªô kh√¥ng s·∫Øp x·∫øp
    df_sorted = df.reset_index(drop=True)
    questions = df_sorted.to_dict(orient='records')

# --- HI·ªÇN TH·ªä C√ÇU H·ªéI V√Ä C√ÅC CH·ª®C NƒÇNG CH·ªàNH S·ª¨A ---
st.session_state.last_mode = mode
st.title("Luy·ªán ƒë·ªÅ tr·∫Øc nghi·ªám")

for i, q in enumerate(questions):
    oid = str(q['Original'])
    sheet = q.get('SheetName', selected_sheets[0] if selected_sheets else '')
    row_id = f"{sheet}_{oid}_{i}"

    st.markdown(f"### @ {oid}")
    col1, col2, col3, col4, col5 = st.columns([2, 1, 1, 1, 1])
    with col1:
        st.markdown(f"üìÇ **CodeTopic:** <span style='color:limegreen'>{q.get('CodeTopic', '')}</span>",
                    unsafe_allow_html=True)
    with col2:
        if st.button("S·ª≠a ƒë·ªÅ", key=row_id + '_edit_original_btn'):
            st.session_state[row_id + '_edit_original'] = True
    with col3:
        if st.button("S·ª≠a Topic", key=row_id + '_edit_topic_btn'):
            st.session_state[row_id + '_edit_topic'] = True
    with col4:
        if st.button("S·ª≠a c√¢u h·ªèi", key=row_id + '_edit_ques_btn'):
            st.session_state[row_id + '_edit_question'] = True
    with col5:
        if st.button("S·ª≠a h√¨nh", key=row_id + '_edit_image_btn'):
            st.session_state[row_id + '_edit_image'] = True

    # ========== CH·ªàNH S·ª¨A ORIGINAL ==========
    if st.session_state.get(row_id + '_edit_original'):
        new_original = st.text_input("Nh·∫≠p Original m·ªõi:", value=str(q.get('Original', '')), key=row_id + '_original')
        if st.button(f"üíæ L∆∞u Original ({oid})"):
            old_original = q['Original']
            idx = df_all[df_all['Original'] == old_original].index
            if not idx.empty:
                df_all.loc[idx[0], 'Original'] = new_original
                for df_sheet in all_sheets.values():
                    if old_original in df_sheet['Original'].values:
                        df_sheet.loc[df_sheet['Original'] == old_original, 'Original'] = new_original

                if mode == "X√°o tr·ªôn ƒë·ªÅ - 1 c√¢u":
                    for item in st.session_state.shuffled_questions:
                        if item['Original'] == old_original:
                            item['Original'] = new_original
                elif mode != "To√†n b·ªô kh√¥ng s·∫Øp x·∫øp":
                    df_sorted.loc[df_sorted['Original'] == old_original, 'Original'] = new_original

                with pd.ExcelWriter(excel_file, engine='openpyxl', mode='w') as writer:
                    for sn, df_sheet in all_sheets.items():
                        df_sheet.to_excel(writer, sheet_name=sn, index=False)

                st.session_state[row_id + '_edit_original'] = False
                st.success("ƒê√£ c·∫≠p nh·∫≠t Original.")
                st.rerun()

    # ========== CH·ªàNH S·ª¨A CODETOPIC ==========
    if st.session_state.get(row_id + '_edit_topic'):
        new_code = st.text_input("Nh·∫≠p CodeTopic m·ªõi:", value=q.get('CodeTopic') or "", key=row_id + '_codetopic')
        if st.button(f"üíæ L∆∞u CodeTopic ({oid})"):
            idx = df_all[df_all['Original'] == q['Original']].index
            if not idx.empty:
                df_all.loc[idx[0], 'CodeTopic'] = new_code
                for df_sheet in all_sheets.values():
                    if q['Original'] in df_sheet['Original'].values:
                        df_sheet.loc[df_sheet['Original'] == q['Original'], 'CodeTopic'] = new_code

                if mode == "X√°o tr·ªôn ƒë·ªÅ - 1 c√¢u":
                    for item in st.session_state.shuffled_questions:
                        if item['Original'] == q['Original']:
                            item['CodeTopic'] = new_code
                elif mode != "To√†n b·ªô kh√¥ng s·∫Øp x·∫øp":
                    df_sorted.loc[df_sorted['Original'] == q['Original'], 'CodeTopic'] = new_code

                with pd.ExcelWriter(excel_file, engine='openpyxl', mode='w') as writer:
                    for sn, df_sheet in all_sheets.items():
                        df_sheet.to_excel(writer, sheet_name=sn, index=False)

                st.session_state[row_id + '_edit_topic'] = False
                st.success("ƒê√£ c·∫≠p nh·∫≠t CodeTopic.")
                st.rerun()

    # ========== CH·ªàNH S·ª¨A C√ÇU H·ªéI ==========
    question_text = q['Question']
    pattern_question_only = r"(?s)(.*?)(?:\s+A\.\s+(.*?))?(?:\s+B\.\s+(.*?))?(?:\s+C\.\s+(.*?))?(?:\s+D\.\s+(.*?))?(?:\s+E\.\s+(.*?))?$"
    match_question = re.match(pattern_question_only, question_text)
    question_display = match_question.group(1).strip() if match_question else question_text

    if st.session_state.get(row_id + '_edit_question'):
        new_question = st.text_area("Ch·ªânh s·ª≠a c√¢u h·ªèi:", value=q['Question'], height=200,
                                    key=row_id + '_question_edit')
        if st.button(f"üíæ L∆∞u c√¢u h·ªèi ({oid})"):
            idx = df_all[df_all['Original'] == q['Original']].index
            if not idx.empty:
                df_all.loc[idx[0], 'Question'] = new_question
                for df_sheet in all_sheets.values():
                    if q['Original'] in df_sheet['Original'].values:
                        df_sheet.loc[df_sheet['Original'] == q['Original'], 'Question'] = new_question

                if mode == "X√°o tr·ªôn ƒë·ªÅ - 1 c√¢u":
                    for item in st.session_state.shuffled_questions:
                        if item['Original'] == q['Original']:
                            item['Question'] = new_question
                elif mode != "To√†n b·ªô kh√¥ng s·∫Øp x·∫øp":
                    df_sorted.loc[df_sorted['Original'] == q['Original'], 'Question'] = new_question

                with pd.ExcelWriter(excel_file, engine='openpyxl', mode='w') as writer:
                    for sn, df_sheet in all_sheets.items():
                        df_sheet.to_excel(writer, sheet_name=sn, index=False)

                st.session_state[row_id + '_edit_question'] = False
                st.success("ƒê√£ c·∫≠p nh·∫≠t c√¢u h·ªèi.")
                st.rerun()
    else:
        st.markdown(f"<div style='text-align: justify'>{question_display}</div>", unsafe_allow_html=True)

    # ========== HI·ªÇN TH·ªä H√åNH ·∫¢NH ==========
    if pd.notna(q.get('H√¨nh')):
        try:
            img_path = os.path.join(image_folder, str(q['H√¨nh']).strip())
            if os.path.isfile(img_path):
                st.markdown("<div style='text-align: center; margin: 20px 0;'>", unsafe_allow_html=True)
                st.image(img_path, use_container_width=True, clamp=True)
                st.markdown("</div>", unsafe_allow_html=True)
        except:
            pass

    # ========== CH·ªàNH S·ª¨A H√åNH ·∫¢NH ==========
    if st.session_state.get(row_id + '_edit_image'):
        new_image = st.text_input("Nh·∫≠p t√™n file h√¨nh m·ªõi:", value=str(q.get('H√¨nh', '')), key=row_id + '_image_edit')
        if st.button(f"üíæ L∆∞u h√¨nh ·∫£nh ({oid})"):
            idx = df_all[df_all['Original'] == q['Original']].index
            if not idx.empty:
                df_all.loc[idx[0], 'H√¨nh'] = new_image if new_image else None
                for df_sheet in all_sheets.values():
                    if q['Original'] in df_sheet['Original'].values:
                        df_sheet.loc[df_sheet['Original'] == q['Original'], 'H√¨nh'] = new_image if new_image else None

                if mode == "X√°o tr·ªôn ƒë·ªÅ - 1 c√¢u":
                    for item in st.session_state.shuffled_questions:
                        if item['Original'] == q['Original']:
                            item['H√¨nh'] = new_image if new_image else None
                elif mode != "To√†n b·ªô kh√¥ng s·∫Øp x·∫øp":
                    df_sorted.loc[df_sorted['Original'] == q['Original'], 'H√¨nh'] = new_image if new_image else None

                with pd.ExcelWriter(excel_file, engine='openpyxl', mode='w') as writer:
                    for sn, df_sheet in all_sheets.items():
                        df_sheet.to_excel(writer, sheet_name=sn, index=False)

                st.session_state[row_id + '_edit_image'] = False
                st.success("ƒê√£ c·∫≠p nh·∫≠t h√¨nh ·∫£nh.")
                st.rerun()

    # ========== PH·∫¶N ƒê√ÅP √ÅN ==========
    if match_question:
        options = [(label, f"{label}. {match_question.group(i + 2).strip()}")
                   for i, label in enumerate(['A', 'B', 'C', 'D', 'E'])
                   if match_question.group(i + 2) is not None and match_question.group(i + 2).strip() != ""]

        # HI·ªÇN TH·ªä C√ÅC ƒê√ÅP √ÅN TR∆Ø·ªöC
        if options:
            labels = [l for l, _ in options]
            current_selected = st.radio("Ch·ªçn ƒë√°p √°n", labels, format_func=dict(options).get, key=row_id + '_select')

            if row_id + '_select_last' in st.session_state:
                if st.session_state[row_id + '_select_last'] != current_selected:
                    st.session_state[row_id + '_show_answer'] = False
            st.session_state[row_id + '_select_last'] = current_selected

        # N√öT KI·ªÇM TRA V√Ä CH·ªàNH S·ª¨A ƒê√ÅP √ÅN
        col_check, col_edit = st.columns([1, 1])
        with col_check:
            if st.button("Ki·ªÉm tra ƒë√°p √°n", key=row_id + '_check_answer'):
                st.session_state[row_id + '_show_answer'] = True
        with col_edit:
            if st.button("Ch·ªânh s·ª≠a ƒë√°p √°n", key=row_id + '_edit_answer_btn'):
                st.session_state[row_id + '_edit_answer'] = True

        # KI·ªÇM TRA ƒê√ÅP √ÅN
        if st.session_state.get(row_id + '_show_answer'):
            correct = str(q['Anwser']) if pd.notna(q['Anwser']) else ""
            if correct == "":
                st.info("C√¢u n√†y v·∫´n ch∆∞a c√≥ ƒë√°p √°n.")
            elif correct not in ['A', 'B', 'C', 'D', 'E']:
                st.info(f"ƒê√°p √°n tham kh·∫£o: {correct}")
            elif options and current_selected == correct:
                st.success(f"ƒê√£ ch·ªçn ƒë√∫ng ƒë√°p √°n: {correct}")
            elif options:
                st.warning(f"Ch·ªçn sai r√πi, ch·ªçn l·∫°i ƒëi.")
            else:
                st.info(f"ƒê√°p √°n ƒë√∫ng l√†: {correct}")

        # CH·ªàNH S·ª¨A ƒê√ÅP √ÅN
        if st.session_state.get(row_id + '_edit_answer'):
            new_ans = st.text_input("Nh·∫≠p ƒë√°p √°n ƒë√∫ng (c√≥ th·ªÉ ngo√†i A-E):",
                                    value=str(q['Anwser']) if pd.notna(q['Anwser']) else "",
                                    key=row_id + '_new_answer')
            if st.button(f"üíæ L∆∞u ƒë√°p √°n ({oid})"):
                idx = df_all[df_all['Original'] == q['Original']].index
                if not idx.empty:
                    df_all.loc[idx[0], 'Anwser'] = new_ans
                    for df_sheet in all_sheets.values():
                        if q['Original'] in df_sheet['Original'].values:
                            df_sheet.loc[df_sheet['Original'] == q['Original'], 'Anwser'] = new_ans

                    if mode == "X√°o tr·ªôn ƒë·ªÅ - 1 c√¢u":
                        for item in st.session_state.shuffled_questions:
                            if item['Original'] == q['Original']:
                                item['Anwser'] = new_ans
                    elif mode != "To√†n b·ªô kh√¥ng s·∫Øp x·∫øp":
                        df_sorted.loc[df_sorted['Original'] == q['Original'], 'Anwser'] = new_ans

                    with pd.ExcelWriter(excel_file, engine='openpyxl', mode='w') as writer:
                        for sn, df_sheet in all_sheets.items():
                            df_sheet.to_excel(writer, sheet_name=sn, index=False)

                    st.session_state[row_id + '_edit_answer'] = False
                    st.success("ƒê√£ c·∫≠p nh·∫≠t ƒë√°p √°n.")
                    st.rerun()
    else:
        # TR∆Ø·ªúNG H·ª¢P KH√îNG C√ì ƒê√ÅP √ÅN D·∫†NG A, B, C...
        st.warning("Kh√¥ng t√¨m th·∫•y ƒë√°p √°n d·∫°ng A, B, C... trong c√¢u h·ªèi n√†y")

        col_check, col_edit = st.columns([1, 1])
        with col_check:
            if st.button("Ki·ªÉm tra ƒë√°p √°n", key=row_id + '_check_answer'):
                st.session_state[row_id + '_show_answer'] = True
        with col_edit:
            if st.button("Ch·ªânh s·ª≠a ƒë√°p √°n", key=row_id + '_edit_answer_btn'):
                st.session_state[row_id + '_edit_answer'] = True

        if st.session_state.get(row_id + '_show_answer'):
            correct = str(q['Anwser']) if pd.notna(q['Anwser']) else ""
            if correct == "":
                st.info("C√¢u n√†y v·∫´n ch∆∞a c√≥ ƒë√°p √°n.")
            else:
                st.info(f"ƒê√°p √°n tham kh·∫£o: {correct}")

        if st.session_state.get(row_id + '_edit_answer'):
            new_ans = st.text_input("Nh·∫≠p ƒë√°p √°n ƒë√∫ng:",
                                    value=str(q['Anwser']) if pd.notna(q['Anwser']) else "",
                                    key=row_id + '_new_answer')
            if st.button(f"üíæ L∆∞u ƒë√°p √°n ({oid})"):
                idx = df_all[df_all['Original'] == q['Original']].index
                if not idx.empty:
                    df_all.loc[idx[0], 'Anwser'] = new_ans
                    for df_sheet in all_sheets.values():
                        if q['Original'] in df_sheet['Original'].values:
                            df_sheet.loc[df_sheet['Original'] == q['Original'], 'Anwser'] = new_ans

                    if mode == "X√°o tr·ªôn ƒë·ªÅ - 1 c√¢u":
                        for item in st.session_state.shuffled_questions:
                            if item['Original'] == q['Original']:
                                item['Anwser'] = new_ans
                    elif mode != "To√†n b·ªô kh√¥ng s·∫Øp x·∫øp":
                        df_sorted.loc[df_sorted['Original'] == q['Original'], 'Anwser'] = new_ans

                    with pd.ExcelWriter(excel_file, engine='openpyxl', mode='w') as writer:
                        for sn, df_sheet in all_sheets.items():
                            df_sheet.to_excel(writer, sheet_name=sn, index=False)

                    st.session_state[row_id + '_edit_answer'] = False
                    st.success("ƒê√£ c·∫≠p nh·∫≠t ƒë√°p √°n.")
                    st.rerun()

    # ... (ph·∫ßn code tr∆∞·ªõc gi·ªØ nguy√™n)

    # ========== N√öT ƒêI·ªÄU H∆Ø·ªöNG ==========
    if mode != "To√†n b·ªô kh√¥ng s·∫Øp x·∫øp":
        if mode == "X√°o tr·ªôn ƒë·ªÅ - 1 c√¢u":
            show_navigation_buttons(len(st.session_state.shuffled_questions), st.session_state.shuffled_index, mode,
                                    "shuffled")
        elif mode == "Ng·∫´u nhi√™n 1 c√¢u":
            show_navigation_buttons(len(df), st.session_state.random_index, mode, "random")
        elif mode in ["TƒÉng d·∫ßn theo Original", "Gi·∫£m d·∫ßn theo Original"]:
            show_navigation_buttons(len(df_sorted), st.session_state.sorted_index, mode, "sorted")
        elif mode == "Theo th·ª© t·ª± trong file Excel":
            show_navigation_buttons(len(df_sorted), st.session_state.excel_index, mode, "excel")

    # ========== N√öT HI·ªÇN TH·ªä GHI CH√ö ==========
    st.button("üìù Hi·ªán/Gi·∫•u ghi ch√∫", key=f"{row_id}_toggle_note",
              on_click=lambda: st.session_state.update(show_note=not st.session_state.show_note))

    # ========== PH·∫¶N GHI CH√ö ==========
    if st.session_state.show_note:
        # Hi·ªÉn th·ªã ghi ch√∫ hi·ªán t·∫°i v·ªõi n√∫t ch·ªânh s·ª≠a
        st.markdown("#### üìù Ghi ch√∫ hi·ªán t·∫°i")
        display_note_with_images(q.get('Note'), image_folder)

        # N√∫t ch·ªânh s·ª≠a ghi ch√∫
        if st.button("‚úèÔ∏è Ch·ªânh s·ª≠a ghi ch√∫", key=f"{row_id}_edit_note_btn"):
            st.session_state[f"{row_id}_edit_note"] = True

        # ... (ph·∫ßn c√≤n l·∫°i gi·ªØ nguy√™n)

        # Ph·∫ßn ch·ªânh s·ª≠a ghi ch√∫ (ch·ªâ hi·ªán khi b·∫•m n√∫t)
        if st.session_state.get(f"{row_id}_edit_note"):
            st.markdown("#### ‚úèÔ∏è Ch·ªânh s·ª≠a ghi ch√∫")

            # Tabs for note editing
            tab_text, tab_image = st.tabs(["üìù Text", "üñºÔ∏è Image"])

            with tab_text:
                note_text = st.text_area("Nh·∫≠p ghi ch√∫:", value=q.get('Note') or "", height=150,
                                         key=f"{row_id}_note_edit")

            with tab_image:
                # Image upload functionality
                uploaded_file = st.file_uploader("T·∫£i l√™n h√¨nh ·∫£nh", type=['png', 'jpg', 'jpeg'],
                                                 key=f"{row_id}_upload")

                # Clipboard paste functionality
                paste_check = st.checkbox("D√°n h√¨nh ·∫£nh t·ª´ clipboard (Ctrl+V)", key=f"{row_id}_paste_check")

                if paste_check:
                    try:
                        # Get image from clipboard
                        img = ImageGrab.grabclipboard()

                        if img is not None:
                            # Display the image
                            st.image(img, caption="·∫¢nh t·ª´ clipboard", use_container_width=True)

                            # Generate filename
                            img_name = f"note_{oid}_{int(time.time())}.png"
                            img_path = os.path.join(image_folder, img_name)

                            # Save image
                            img.save(img_path)

                            # Hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n v·ªõi n√∫t copy
                            st.markdown("### ƒê∆∞·ªùng d·∫´n ·∫£nh")
                            img_ref = f"\n![image]({img_name})"

                            # T·∫°o column ƒë·ªÉ hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n v√† n√∫t copy
                            col1, col2 = st.columns([4, 1])
                            with col1:
                                st.code(img_ref, language="markdown")
                            with col2:
                                if st.button("üìã Copy", key=f"{row_id}_copy_btn"):
                                    pyperclip.copy(img_ref)
                                    st.toast("ƒê√£ copy v√†o clipboard!")

                            st.success(f"·∫¢nh ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {img_path}")
                            st.info("Vui l√≤ng copy ƒë∆∞·ªùng d·∫´n tr√™n v√† d√°n v√†o √¥ ghi ch√∫")
                        else:
                            st.warning(
                                "Kh√¥ng t√¨m th·∫•y ·∫£nh trong clipboard. H√£y ch·ª•p ·∫£nh m√†n h√¨nh b·∫±ng Snipping Tool v√† nh·∫•n Ctrl+C tr∆∞·ªõc.")
                    except Exception as e:
                        st.error(f"L·ªói khi x·ª≠ l√Ω ·∫£nh t·ª´ clipboard: {str(e)}")
                        st.info("Tr√™n Windows, vui l√≤ng ƒë·∫£m b·∫£o:")
                        st.info("1. ƒê√£ ch·ª•p ·∫£nh m√†n h√¨nh b·∫±ng Snipping Tool")
                        st.info("2. ƒê√£ nh·∫•n Ctrl+C ƒë·ªÉ copy ·∫£nh v√†o clipboard")
                        st.info("3. ƒêang ch·∫°y ·ª©ng d·ª•ng v·ªõi quy·ªÅn administrator n·∫øu c·∫ßn")

            # Save button
            if st.button(f"üíæ L∆∞u ghi ch√∫ {oid}", key=f"{row_id}_save_note"):
                # Handle image saving first
                image_filename = None

                # Check for uploaded file
                if uploaded_file is not None:
                    try:
                        # Create unique filename
                        image_filename = f"note_{oid}_{int(time.time())}.{uploaded_file.type.split('/')[-1]}"
                        img_path = os.path.join(image_folder, image_filename)

                        # Save the image
                        with open(img_path, "wb") as f:
                            f.write(uploaded_file.getbuffer())

                        # Add image reference to note
                        note_text += f"\n![image]({image_filename})"
                    except Exception as e:
                        st.error(f"L·ªói khi l∆∞u h√¨nh ·∫£nh: {str(e)}")

                # Save the note text
                idx = df_all[df_all['Original'] == q['Original']].index
                if not idx.empty:
                    df_all.loc[idx[0], 'Note'] = note_text
                    for df_sheet in all_sheets.values():
                        if q['Original'] in df_sheet['Original'].values:
                            df_sheet.loc[df_sheet['Original'] == q['Original'], 'Note'] = note_text

                    if mode == "X√°o tr·ªôn ƒë·ªÅ - 1 c√¢u":
                        for item in st.session_state.shuffled_questions:
                            if item['Original'] == q['Original']:
                                item['Note'] = note_text
                    elif mode != "To√†n b·ªô kh√¥ng s·∫Øp x·∫øp":
                        df_sorted.loc[df_sorted['Original'] == q['Original'], 'Note'] = note_text

                    with pd.ExcelWriter(excel_file, engine='openpyxl', mode='w') as writer:
                        for sn, df_sheet in all_sheets.items():
                            df_sheet.to_excel(writer, sheet_name=sn, index=False)

                    st.session_state[f"{row_id}_edit_note"] = False
                    st.success("ƒê√£ l∆∞u ghi ch√∫.")
                    st.rerun()